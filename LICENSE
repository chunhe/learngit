1.2 初始化一个Git仓库，使用git init命令。

1.3 添加文件到Git仓库，分两步：
	a.使用命令 git add <file>,注意，可反复多次使用，添加多个文件；
	b.使用git commit -m <message>,完成。
1.4 要随时掌握工作区的状态，使用git status 命令。
1.5 如果git status 告诉你有文件被修改过，用git diff 可以查看修改内容。

1.6 HEAD指向的版本就是当前版本，因此Git允许我们在版本的历史之间穿梭，使用命令git resset --hard commit_id;
	Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
1.7 穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
1.8 要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
1.9 暂存区是Git非常重要的概念，弄明白了暂存区，就弄明白了Git的很多操作到底干了什么。
2.0 Git管理的是修改，而不是文件；
2.1 每次修改，如果不用git add到暂存区，那就不会加入到commit中。
2.2 撤销修改：
		a.场景1：当你该乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file；
		b.场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。
		c.场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
2.3 命令git rm 用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。

2.4 创建ssh key:
		$ ssh-keygen -t rsa -C "youremail@example.com"